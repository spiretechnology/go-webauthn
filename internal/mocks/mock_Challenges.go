// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	webauthn "github.com/spiretechnology/go-webauthn"
	mock "github.com/stretchr/testify/mock"
)

// MockChallenges is an autogenerated mock type for the Challenges type
type MockChallenges struct {
	mock.Mock
}

type MockChallenges_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChallenges) EXPECT() *MockChallenges_Expecter {
	return &MockChallenges_Expecter{mock: &_m.Mock}
}

// HasChallenge provides a mock function with given fields: ctx, user, challege
func (_m *MockChallenges) HasChallenge(ctx context.Context, user webauthn.User, challege [32]byte) (bool, error) {
	ret := _m.Called(ctx, user, challege)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, webauthn.User, [32]byte) (bool, error)); ok {
		return rf(ctx, user, challege)
	}
	if rf, ok := ret.Get(0).(func(context.Context, webauthn.User, [32]byte) bool); ok {
		r0 = rf(ctx, user, challege)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, webauthn.User, [32]byte) error); ok {
		r1 = rf(ctx, user, challege)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChallenges_HasChallenge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasChallenge'
type MockChallenges_HasChallenge_Call struct {
	*mock.Call
}

// HasChallenge is a helper method to define mock.On call
//   - ctx context.Context
//   - user webauthn.User
//   - challege [32]byte
func (_e *MockChallenges_Expecter) HasChallenge(ctx interface{}, user interface{}, challege interface{}) *MockChallenges_HasChallenge_Call {
	return &MockChallenges_HasChallenge_Call{Call: _e.mock.On("HasChallenge", ctx, user, challege)}
}

func (_c *MockChallenges_HasChallenge_Call) Run(run func(ctx context.Context, user webauthn.User, challege [32]byte)) *MockChallenges_HasChallenge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(webauthn.User), args[2].([32]byte))
	})
	return _c
}

func (_c *MockChallenges_HasChallenge_Call) Return(_a0 bool, _a1 error) *MockChallenges_HasChallenge_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChallenges_HasChallenge_Call) RunAndReturn(run func(context.Context, webauthn.User, [32]byte) (bool, error)) *MockChallenges_HasChallenge_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveChallenge provides a mock function with given fields: ctx, user, challege
func (_m *MockChallenges) RemoveChallenge(ctx context.Context, user webauthn.User, challege [32]byte) error {
	ret := _m.Called(ctx, user, challege)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, webauthn.User, [32]byte) error); ok {
		r0 = rf(ctx, user, challege)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockChallenges_RemoveChallenge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveChallenge'
type MockChallenges_RemoveChallenge_Call struct {
	*mock.Call
}

// RemoveChallenge is a helper method to define mock.On call
//   - ctx context.Context
//   - user webauthn.User
//   - challege [32]byte
func (_e *MockChallenges_Expecter) RemoveChallenge(ctx interface{}, user interface{}, challege interface{}) *MockChallenges_RemoveChallenge_Call {
	return &MockChallenges_RemoveChallenge_Call{Call: _e.mock.On("RemoveChallenge", ctx, user, challege)}
}

func (_c *MockChallenges_RemoveChallenge_Call) Run(run func(ctx context.Context, user webauthn.User, challege [32]byte)) *MockChallenges_RemoveChallenge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(webauthn.User), args[2].([32]byte))
	})
	return _c
}

func (_c *MockChallenges_RemoveChallenge_Call) Return(_a0 error) *MockChallenges_RemoveChallenge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChallenges_RemoveChallenge_Call) RunAndReturn(run func(context.Context, webauthn.User, [32]byte) error) *MockChallenges_RemoveChallenge_Call {
	_c.Call.Return(run)
	return _c
}

// StoreChallenge provides a mock function with given fields: ctx, user, challenge
func (_m *MockChallenges) StoreChallenge(ctx context.Context, user webauthn.User, challenge [32]byte) error {
	ret := _m.Called(ctx, user, challenge)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, webauthn.User, [32]byte) error); ok {
		r0 = rf(ctx, user, challenge)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockChallenges_StoreChallenge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreChallenge'
type MockChallenges_StoreChallenge_Call struct {
	*mock.Call
}

// StoreChallenge is a helper method to define mock.On call
//   - ctx context.Context
//   - user webauthn.User
//   - challenge [32]byte
func (_e *MockChallenges_Expecter) StoreChallenge(ctx interface{}, user interface{}, challenge interface{}) *MockChallenges_StoreChallenge_Call {
	return &MockChallenges_StoreChallenge_Call{Call: _e.mock.On("StoreChallenge", ctx, user, challenge)}
}

func (_c *MockChallenges_StoreChallenge_Call) Run(run func(ctx context.Context, user webauthn.User, challenge [32]byte)) *MockChallenges_StoreChallenge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(webauthn.User), args[2].([32]byte))
	})
	return _c
}

func (_c *MockChallenges_StoreChallenge_Call) Return(_a0 error) *MockChallenges_StoreChallenge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChallenges_StoreChallenge_Call) RunAndReturn(run func(context.Context, webauthn.User, [32]byte) error) *MockChallenges_StoreChallenge_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChallenges creates a new instance of MockChallenges. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChallenges(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChallenges {
	mock := &MockChallenges{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
