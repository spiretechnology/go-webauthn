// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	webauthn "github.com/spiretechnology/go-webauthn"
	mock "github.com/stretchr/testify/mock"
)

// MockCredentials is an autogenerated mock type for the Credentials type
type MockCredentials struct {
	mock.Mock
}

type MockCredentials_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCredentials) EXPECT() *MockCredentials_Expecter {
	return &MockCredentials_Expecter{mock: &_m.Mock}
}

// GetCredential provides a mock function with given fields: ctx, user, credentialID
func (_m *MockCredentials) GetCredential(ctx context.Context, user webauthn.User, credentialID []byte) (*webauthn.Credential, error) {
	ret := _m.Called(ctx, user, credentialID)

	var r0 *webauthn.Credential
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, webauthn.User, []byte) (*webauthn.Credential, error)); ok {
		return rf(ctx, user, credentialID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, webauthn.User, []byte) *webauthn.Credential); ok {
		r0 = rf(ctx, user, credentialID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*webauthn.Credential)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, webauthn.User, []byte) error); ok {
		r1 = rf(ctx, user, credentialID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCredentials_GetCredential_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCredential'
type MockCredentials_GetCredential_Call struct {
	*mock.Call
}

// GetCredential is a helper method to define mock.On call
//   - ctx context.Context
//   - user webauthn.User
//   - credentialID []byte
func (_e *MockCredentials_Expecter) GetCredential(ctx interface{}, user interface{}, credentialID interface{}) *MockCredentials_GetCredential_Call {
	return &MockCredentials_GetCredential_Call{Call: _e.mock.On("GetCredential", ctx, user, credentialID)}
}

func (_c *MockCredentials_GetCredential_Call) Run(run func(ctx context.Context, user webauthn.User, credentialID []byte)) *MockCredentials_GetCredential_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(webauthn.User), args[2].([]byte))
	})
	return _c
}

func (_c *MockCredentials_GetCredential_Call) Return(_a0 *webauthn.Credential, _a1 error) *MockCredentials_GetCredential_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCredentials_GetCredential_Call) RunAndReturn(run func(context.Context, webauthn.User, []byte) (*webauthn.Credential, error)) *MockCredentials_GetCredential_Call {
	_c.Call.Return(run)
	return _c
}

// GetCredentials provides a mock function with given fields: ctx, user
func (_m *MockCredentials) GetCredentials(ctx context.Context, user webauthn.User) ([]webauthn.Credential, error) {
	ret := _m.Called(ctx, user)

	var r0 []webauthn.Credential
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, webauthn.User) ([]webauthn.Credential, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, webauthn.User) []webauthn.Credential); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]webauthn.Credential)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, webauthn.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCredentials_GetCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCredentials'
type MockCredentials_GetCredentials_Call struct {
	*mock.Call
}

// GetCredentials is a helper method to define mock.On call
//   - ctx context.Context
//   - user webauthn.User
func (_e *MockCredentials_Expecter) GetCredentials(ctx interface{}, user interface{}) *MockCredentials_GetCredentials_Call {
	return &MockCredentials_GetCredentials_Call{Call: _e.mock.On("GetCredentials", ctx, user)}
}

func (_c *MockCredentials_GetCredentials_Call) Run(run func(ctx context.Context, user webauthn.User)) *MockCredentials_GetCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(webauthn.User))
	})
	return _c
}

func (_c *MockCredentials_GetCredentials_Call) Return(_a0 []webauthn.Credential, _a1 error) *MockCredentials_GetCredentials_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCredentials_GetCredentials_Call) RunAndReturn(run func(context.Context, webauthn.User) ([]webauthn.Credential, error)) *MockCredentials_GetCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// StoreCredential provides a mock function with given fields: ctx, user, credential, meta
func (_m *MockCredentials) StoreCredential(ctx context.Context, user webauthn.User, credential webauthn.Credential, meta webauthn.CredentialMeta) error {
	ret := _m.Called(ctx, user, credential, meta)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, webauthn.User, webauthn.Credential, webauthn.CredentialMeta) error); ok {
		r0 = rf(ctx, user, credential, meta)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCredentials_StoreCredential_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreCredential'
type MockCredentials_StoreCredential_Call struct {
	*mock.Call
}

// StoreCredential is a helper method to define mock.On call
//   - ctx context.Context
//   - user webauthn.User
//   - credential webauthn.Credential
//   - meta webauthn.CredentialMeta
func (_e *MockCredentials_Expecter) StoreCredential(ctx interface{}, user interface{}, credential interface{}, meta interface{}) *MockCredentials_StoreCredential_Call {
	return &MockCredentials_StoreCredential_Call{Call: _e.mock.On("StoreCredential", ctx, user, credential, meta)}
}

func (_c *MockCredentials_StoreCredential_Call) Run(run func(ctx context.Context, user webauthn.User, credential webauthn.Credential, meta webauthn.CredentialMeta)) *MockCredentials_StoreCredential_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(webauthn.User), args[2].(webauthn.Credential), args[3].(webauthn.CredentialMeta))
	})
	return _c
}

func (_c *MockCredentials_StoreCredential_Call) Return(_a0 error) *MockCredentials_StoreCredential_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCredentials_StoreCredential_Call) RunAndReturn(run func(context.Context, webauthn.User, webauthn.Credential, webauthn.CredentialMeta) error) *MockCredentials_StoreCredential_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCredentials creates a new instance of MockCredentials. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCredentials(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCredentials {
	mock := &MockCredentials{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
