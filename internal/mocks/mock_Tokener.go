// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	webauthn "github.com/spiretechnology/go-webauthn"
	mock "github.com/stretchr/testify/mock"
)

// MockTokener is an autogenerated mock type for the Tokener type
type MockTokener struct {
	mock.Mock
}

type MockTokener_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTokener) EXPECT() *MockTokener_Expecter {
	return &MockTokener_Expecter{mock: &_m.Mock}
}

// CreateToken provides a mock function with given fields: challenge, user
func (_m *MockTokener) CreateToken(challenge [32]byte, user webauthn.User) (string, error) {
	ret := _m.Called(challenge, user)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func([32]byte, webauthn.User) (string, error)); ok {
		return rf(challenge, user)
	}
	if rf, ok := ret.Get(0).(func([32]byte, webauthn.User) string); ok {
		r0 = rf(challenge, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func([32]byte, webauthn.User) error); ok {
		r1 = rf(challenge, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokener_CreateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateToken'
type MockTokener_CreateToken_Call struct {
	*mock.Call
}

// CreateToken is a helper method to define mock.On call
//   - challenge [32]byte
//   - user webauthn.User
func (_e *MockTokener_Expecter) CreateToken(challenge interface{}, user interface{}) *MockTokener_CreateToken_Call {
	return &MockTokener_CreateToken_Call{Call: _e.mock.On("CreateToken", challenge, user)}
}

func (_c *MockTokener_CreateToken_Call) Run(run func(challenge [32]byte, user webauthn.User)) *MockTokener_CreateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([32]byte), args[1].(webauthn.User))
	})
	return _c
}

func (_c *MockTokener_CreateToken_Call) Return(_a0 string, _a1 error) *MockTokener_CreateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokener_CreateToken_Call) RunAndReturn(run func([32]byte, webauthn.User) (string, error)) *MockTokener_CreateToken_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyToken provides a mock function with given fields: token, challenge, user
func (_m *MockTokener) VerifyToken(token string, challenge [32]byte, user webauthn.User) error {
	ret := _m.Called(token, challenge, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, [32]byte, webauthn.User) error); ok {
		r0 = rf(token, challenge, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTokener_VerifyToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyToken'
type MockTokener_VerifyToken_Call struct {
	*mock.Call
}

// VerifyToken is a helper method to define mock.On call
//   - token string
//   - challenge [32]byte
//   - user webauthn.User
func (_e *MockTokener_Expecter) VerifyToken(token interface{}, challenge interface{}, user interface{}) *MockTokener_VerifyToken_Call {
	return &MockTokener_VerifyToken_Call{Call: _e.mock.On("VerifyToken", token, challenge, user)}
}

func (_c *MockTokener_VerifyToken_Call) Run(run func(token string, challenge [32]byte, user webauthn.User)) *MockTokener_VerifyToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([32]byte), args[2].(webauthn.User))
	})
	return _c
}

func (_c *MockTokener_VerifyToken_Call) Return(_a0 error) *MockTokener_VerifyToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTokener_VerifyToken_Call) RunAndReturn(run func(string, [32]byte, webauthn.User) error) *MockTokener_VerifyToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTokener creates a new instance of MockTokener. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTokener(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTokener {
	mock := &MockTokener{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
